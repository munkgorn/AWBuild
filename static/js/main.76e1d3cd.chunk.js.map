{"version":3,"sources":["alienworld/AWMine.js","context/Auth.js","alienworld/AWConstants.js","alienworld/AWFederation.js","page/Home.js","page/AWAccount.js","App.js","reportWebVitals.js","index.js"],"names":["crypto","require","Serialize","TextDecoder","TextEncoder","Int64LE","dayjs","nameToArray","name","sb","SerialBuffer","textEncoder","textDecoder","pushName","array","intToName","int","pushArray","toArray","getName","getPlayerData","federation_account","account","eos_rpc","aa_api","a","get_table_rows","code","scope","table","lower_bound","upper_bound","player_res","player_data","tag","avatar","rows","length","getAsset","asset","getBag","mining_account","bag_res","bag","items_p","items","map","item_id","Promise","all","setBag","eos_api","permission","actions","authorization","actor","data","slice","transact","blocksBehind","expireSeconds","res","getLandById","land_id","land_res","landowner","owner","Error","land_asset","planet","img","console","log","message","getLand","miner_res","current_land","error","getLandMiningParams","land","mining_params","delay","difficulty","ease","getBagMiningParams","min_delay","b","parseInt","getNextMineDelay","params","state_res","ms_until_mine","now","valueOf","last_mine_tx","last_mine","add","toISOString","last_mine_ms","lastMineTx","doWorkWorker","tempDoWOrkWorker","_message","getRand","arr","Uint8Array","i","rand","Math","floor","random","toHex","buffer","toString","padStart","join","account_str","last_mine_arr","is_wam","substr","good","itr","start","Date","getTime","rand_arr","combined","set","subtle","digest","hash","hex_digest","last","end","rand_str","mine_work","postMessage","hexString","match","byte","Blob","type","worker","Worker","URL","createObjectURL","resolve","onmessage","val","authContext","createContext","JsonRpc","Api","RpcError","ExplorerApi","fetch","RpcApi","rateLimit","Panel","Collapse","TextArea","Input","wax","waxjs","Home","auth","useContext","listHour","useState","maxCPU","setMaxCPU","ac","setAC","waxp","setWax","tlm","setTlm","cpu","setCpu","ram","setRam","net","setNet","setItems","setMyBag","setMap","setDelay","status","setStatus","historyMine","checkTime","setCheckTime","mineing","setMineing","time","includes","hour","condition","setCondition","getWax","symbol","axios","post","JSON","stringify","then","getTLM","json","table_key","index_position","key_type","limit","reverse","show_payer","balance","getCPURAM","tempCPU","cpu_limit","used","max","toFixed","tempRAM","ram_usage","ram_quota","tempNET","net_limit","awGetMineDelay","awmine","api","rpc","filter","f","schema","schema_name","v","asset_id","x","y","commission","land_params","minedelay","awGetData","d","seconds","setInterval","min","sec","clearInterval","getBagDifficulty","getLandDifficulty","background_mine","reject","bagDifficulty","landDifficulty","catch","e","awTransection","parse","mine_data","miner","nonce","result","Map","processed","mined_amount","action_traces","inline_traces","forEach","t","act","to","quantity","split","amount_str","parseFloat","push","format","err","useEffect","awMine","timer","window","login","user","gutter","span","CheckCircleFilled","style","color","CloseCircleFilled","marginBottom","marginRight","onChange","defaultValue","bordered","percent","placeholder","value","ghost","expandIcon","header","ch","target","checked","h","find","extend","relativeTime","utc","timezone","Layout","Header","Content","Footer","Search","AWAccount","accounts","setAccounts","datas","setDatas","setSec","timeoutID","setTimeoutID","txtSearch","setTxtSearch","allWax","setAllWax","allTlm","setAllTlm","columns","title","dataIndex","key","width","render","strokeColor","successPercent","responsive","text","record","size","onClick","clearAccount","DeleteOutlined","acc","getAccountInfo","accs","request1","request2","request3","spread","responses","w","core_liquid_balance","account_name","reduce","c","destroy","onSearch","loading","ElementTable","dataSource","loopTime","info","sm","md","lg","allowClear","enterButton","PlusOutlined","App","isLogin","publicKey","Provider","className","theme","mode","defaultSelectedKeys","Item","padding","path","textAlign","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.76e1d3cd.chunk.js","sourcesContent":["'use strict';\r\n\r\n    const crypto = require('crypto-browserify');\r\n    const fetch = require('node-fetch');\r\n    const { Serialize } = require('eosjs');\r\n    const { TextDecoder, TextEncoder } = require('text-encoding');\r\n    const Int64LE = require('int64-buffer').Int64LE;\r\n    const dayjs = require('dayjs');\r\n    \r\n    /* Utility functions */\r\n    const getRand = () => {\r\n        const arr = new Uint8Array(8);\r\n        for (let i=0; i < 8; i++){\r\n            const rand = parseInt(Math.floor(Math.random() * 255));\r\n            arr[i] = rand;\r\n        }\r\n        return arr;\r\n    };\r\n\r\n    const pushRand = (sb) => {\r\n        const arr = getRand();\r\n        sb.pushArray(arr);\r\n        return arr;\r\n    };\r\n\r\n\r\n    /* uint8array to / from hex strings */\r\n    const fromHexString = hexString =>\r\n        new Uint8Array(hexString.match(/.{1,2}/g).map(byte => parseInt(byte, 16)));\r\n\r\n    const toHexString = bytes =>\r\n        bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\r\n\r\n    const nameToInt = (name) => {\r\n        const sb = new Serialize.SerialBuffer({\r\n            textEncoder: new TextEncoder,\r\n            textDecoder: new TextDecoder\r\n        });\r\n\r\n        sb.pushName(name);\r\n\r\n        const name_64 = new Int64LE(sb.array);\r\n\r\n        return name_64 + '';\r\n    }\r\n\r\n    const nameToArray = (name) => {\r\n        const sb = new Serialize.SerialBuffer({\r\n            textEncoder: new TextEncoder,\r\n            textDecoder: new TextDecoder\r\n        });\r\n\r\n        sb.pushName(name);\r\n\r\n        return sb.array;\r\n    }\r\n\r\n    const intToName = (int) => {\r\n        int = new Int64LE(int);\r\n\r\n        const sb = new Serialize.SerialBuffer({\r\n            textEncoder: new TextEncoder,\r\n            textDecoder: new TextDecoder\r\n        });\r\n\r\n        sb.pushArray(int.toArray());\r\n\r\n        const name = sb.getName();\r\n\r\n        return name;\r\n    }\r\n\r\n\r\n    const setPlayerData = async (federation_account, account, eos_api, tag='', avatar_id=0, permission = 'active') => {\r\n        const actions = [];\r\n        actions.push({\r\n            account: federation_account,\r\n            name: 'setavatar',\r\n            authorization: [{\r\n                actor: account,\r\n                permission: permission\r\n            }],\r\n            data: {\r\n                account,\r\n                avatar_id\r\n            }\r\n        });\r\n        actions.push({\r\n            account: federation_account,\r\n            name: 'settag',\r\n            authorization: [{\r\n                actor: account,\r\n                permission: permission\r\n            }],\r\n            data: {\r\n                account,\r\n                tag\r\n            }\r\n        });\r\n\r\n        const res = await eos_api.transact({\r\n            actions\r\n        }, {\r\n            blocksBehind: 3,\r\n            expireSeconds: 90,\r\n        });\r\n\r\n        return res;\r\n    };\r\n\r\n    const setTagData = async (federation_account, account, eos_api, tag, permission = 'active') => {\r\n        const actions = [];\r\n        actions.push({\r\n            account: federation_account,\r\n            name: 'settag',\r\n            authorization: [{\r\n                actor: account,\r\n                permission: permission\r\n            }],\r\n            data: {\r\n                account,\r\n                tag\r\n            }\r\n        });\r\n\r\n        const res = await eos_api.transact({\r\n            actions\r\n        }, {\r\n            blocksBehind: 3,\r\n            expireSeconds: 90,\r\n        });\r\n\r\n        return res;\r\n    };\r\n\r\n    const getPlayerData = async (federation_account, account, eos_rpc, aa_api) => {\r\n\r\n        const player_res = await eos_rpc.get_table_rows({\r\n            code: federation_account,\r\n            scope: federation_account,\r\n            table: 'players',\r\n            lower_bound: account,\r\n            upper_bound: account\r\n        });\r\n\r\n        const player_data = {\r\n            tag: '',\r\n            avatar: ''\r\n        };\r\n\r\n        if (player_res.rows.length){\r\n            player_data.tag = player_res.rows[0].tag;\r\n            if (player_res.rows[0].avatar > 0){\r\n                const asset = await aa_api.getAsset(player_res.rows[0].avatar);\r\n                if (asset){\r\n                    player_data.avatar = asset;\r\n                }\r\n            }\r\n        }\r\n\r\n        return player_data;\r\n\r\n    };\r\n\r\n\r\n    const getPlanets = async (federation_account, mining_account, eos_rpc) => {\r\n        const planets_res = await eos_rpc.get_table_rows({code: federation_account, scope: federation_account, table: 'planets', limit: 100});\r\n\r\n        const planets = [];\r\n        for (let p = 0; p < planets_res.rows.length; p++){\r\n            const pr = planets_res.rows[p];\r\n            if (pr.planet_name === 'bina.world'){continue;}\r\n\r\n            try {\r\n                pr.metadata = JSON.parse(pr.metadata);\r\n            }\r\n            catch (e){\r\n                pr.metadata = {};\r\n            }\r\n\r\n            // trilium reserve\r\n            const planet_reserve = await eos_rpc.get_currency_balance('alien.worlds', pr.planet_name, 'TLM');\r\n            pr.reserve = planet_reserve[0];\r\n\r\n            // mining pot\r\n            const mining_pot_res = await eos_rpc.get_table_rows({\r\n                code: mining_account,\r\n                scope: pr.planet_name,\r\n                table: 'state3'\r\n            });\r\n            if (mining_pot_res.rows.length){\r\n                pr.mining_pot = {\r\n                    fill_rate: mining_pot_res.rows[0].fill_rate,\r\n                    bucket_total: mining_pot_res.rows[0].bucket_total,\r\n                    mine_bucket: mining_pot_res.rows[0].mine_bucket,\r\n                    allocated_percentage: 80\r\n                };\r\n            }\r\n\r\n            const [dac_precision, dac_symbol] = pr.dac_symbol.split(',');\r\n            pr.total_stake = (pr.total_stake / Math.pow(10, parseInt(dac_precision))).toFixed(dac_precision);\r\n            pr.total_stake = `${pr.total_stake} ${dac_symbol}`;\r\n\r\n            pr.active = !!pr.active;\r\n            planets.push(pr);\r\n        }\r\n\r\n        return planets;\r\n    };\r\n\r\n    const getBag = async (mining_account, account, eos_rpc, aa_api) => {\r\n        const bag_res = await eos_rpc.get_table_rows({code: mining_account, scope: mining_account, table: 'bags', lower_bound: account, upper_bound: account});\r\n        const bag = [];\r\n        if (bag_res.rows.length){\r\n            const items_p = bag_res.rows[0].items.map((item_id) => {\r\n                return aa_api.getAsset(item_id);\r\n            });\r\n            return await Promise.all(items_p);\r\n        }\r\n        return bag;\r\n    }\r\n\r\n    const setBag = async (mining_account, account, items, eos_api, permission = 'active') => {\r\n        const actions = [{\r\n            account: mining_account,\r\n            name: 'setbag',\r\n            authorization: [{\r\n                actor: account,\r\n                permission: permission,\r\n            }],\r\n            data: {\r\n                account,\r\n                items: items.slice(0, 3)\r\n            }\r\n        }];\r\n        const res = await eos_api.transact({\r\n            actions\r\n        }, {\r\n            blocksBehind: 3,\r\n            expireSeconds: 90,\r\n        });\r\n\r\n        return res;\r\n    }\r\n\r\n    const getLandById = async (federation_account, land_id, eos_rpc, aa_api) => {\r\n        try {\r\n            const land_res = await eos_rpc.get_table_rows({ code: federation_account, scope: federation_account, table: 'landregs', lower_bound: land_id, upper_bound: land_id });\r\n            let landowner = 'federation';\r\n            if (land_res.rows.length){\r\n                landowner = land_res.rows[0].owner;\r\n            }\r\n\r\n            if (!landowner) {\r\n                throw new Error(`Land owner not found for land id ${land_id}`);\r\n            }\r\n\r\n            const land_asset = await aa_api.getAsset(land_id);\r\n            // const land_data = await land_asset.toObject();\r\n\r\n            land_asset.data.planet = intToName(land_asset.data.planet);\r\n\r\n            // make sure these attributes are present\r\n            land_asset.data.img = land_asset.data.img || '';\r\n            land_asset.owner = land_asset.owner || landowner;\r\n\r\n            return land_asset;\r\n        }\r\n        catch (e){\r\n            console.log(`Error in getLandById ${e.message}`);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    const getLand = async (federation_account, mining_account, account, eos_rpc, aa_api) => {\r\n        try {\r\n            const miner_res = await eos_rpc.get_table_rows({code: mining_account, scope: mining_account, table: 'miners', lower_bound: account, upper_bound: account});\r\n            let land_id;\r\n            if (miner_res.rows.length === 0){\r\n                return null;\r\n            }\r\n            else {\r\n                land_id = miner_res.rows[0].current_land;\r\n            }\r\n\r\n            return await getLandById(federation_account, land_id, eos_rpc, aa_api);\r\n        }\r\n        catch (e) {\r\n            console.error(`Failed to get land - ${e.message}`);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    const setLand = async (mining_account, account, land_id, eos_api, permission = 'active') => {\r\n        const actions = [{\r\n            account: mining_account,\r\n            name: 'setland',\r\n            authorization: [{\r\n                actor: account,\r\n                permission: permission,\r\n            }],\r\n            data: {\r\n                account,\r\n                land_id\r\n            }\r\n        }];\r\n        const res = await eos_api.transact({\r\n            actions\r\n        }, {\r\n            blocksBehind: 3,\r\n            expireSeconds: 90,\r\n        });\r\n\r\n        return res;\r\n    }\r\n\r\n    const getLandByPlanet = async (planet_name, atomic_endpoint, collection, schema = 'land.worlds') => {\r\n        const planet_int = nameToInt(planet_name);\r\n\r\n        // https://test.wax.api.atomicassets.io/atomicassets/v1/assets?collection_name=test.worlds&schema_name=land.worlds&data.planet=6310955965768028672\r\n\r\n        const url = `${atomic_endpoint}/atomicassets/v1/assets?collection_name=${collection}&schema_name=${schema}&data.planet=${planet_int}`;\r\n        const res = await fetch(url);\r\n\r\n        const json = await res.json();\r\n\r\n        return json.data.map(d => {\r\n            // console.log('ddd', d)\r\n            let commission = d.mutable_data.commission || 0;\r\n            // console.log(commission);\r\n            return {\r\n                id: d.asset_id,\r\n                name: d.name,\r\n                owner: d.owner,\r\n                commission: (commission / 100).toFixed(2)\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    const getLandMiningParams = (land) => {\r\n        const mining_params = {\r\n            delay: 0,\r\n            difficulty: 0,\r\n            ease: 0\r\n        };\r\n\r\n        mining_params.delay += land.data.delay;\r\n        mining_params.difficulty += land.data.difficulty;\r\n        mining_params.ease += land.data.ease;\r\n\r\n        return mining_params;\r\n    };\r\n\r\n    const getBagMiningParams = (bag) => {\r\n        const mining_params = {\r\n            delay: 0,\r\n            difficulty: 0,\r\n            ease: 0\r\n        };\r\n\r\n        let min_delay = 65535;\r\n\r\n        for (let b=0; b < bag.length; b++){\r\n            if (bag[b].data.delay < min_delay){\r\n                min_delay = bag[b].data.delay;\r\n            }\r\n            mining_params.delay += bag[b].data.delay;\r\n            mining_params.difficulty += bag[b].data.difficulty;\r\n            mining_params.ease += bag[b].data.ease / 10;\r\n        }\r\n\r\n        if (bag.length === 2){\r\n            mining_params.delay -= parseInt(min_delay / 2);\r\n        }\r\n        else if (bag.length === 3){\r\n            mining_params.delay -= min_delay;\r\n        }\r\n\r\n        return mining_params;\r\n    };\r\n\r\n    /* Return number of ms before we can next mine */\r\n    const getNextMineDelay = async (mining_account, account, params, eos_rpc) => {\r\n\r\n        console.log(account)\r\n        const state_res = await eos_rpc.get_table_rows({\r\n            code: mining_account,\r\n            scope: mining_account,\r\n            table: 'miners',\r\n            lower_bound: account,\r\n            upper_bound: account\r\n        });\r\n\r\n\r\n\r\n        let ms_until_mine = -1;\r\n        const now = dayjs().valueOf();\r\n        console.log(`Delay = ${params.delay}`);\r\n\r\n\r\n        if (state_res.rows.length && state_res.rows[0].last_mine_tx !== '0000000000000000000000000000000000000000000000000000000000000000'){\r\n            console.log(`Last mine was at ${dayjs(state_res.rows[0].last_mine).add(7,'hour').toISOString()}, now is ${dayjs().toISOString()}`);\r\n\r\n            const last_mine_ms = dayjs(state_res.rows[0].last_mine).add(7,'hour').valueOf();\r\n            ms_until_mine = last_mine_ms + (params.delay * 1000) - now;\r\n\r\n\r\n            if (ms_until_mine < 0){\r\n                ms_until_mine = 0;\r\n            }\r\n        }\r\n        // console.log(`ms until next mine ${ms_until_mine}`);\r\n\r\n        return ms_until_mine;\r\n    };\r\n\r\n    const lastMineTx = async (mining_account, account, eos_rpc) => {\r\n        const state_res = await eos_rpc.get_table_rows({\r\n            code: mining_account,\r\n            scope: mining_account,\r\n            table: 'miners',\r\n            lower_bound: account,\r\n            upper_bound: account\r\n        });\r\n        let last_mine_tx = '0000000000000000000000000000000000000000000000000000000000000000';\r\n        if (state_res.rows.length){\r\n            last_mine_tx = state_res.rows[0].last_mine_tx;\r\n        }\r\n\r\n        return last_mine_tx;\r\n    };\r\n\r\n    const doWork = async ({mining_account, account, difficulty, last_mine_tx}) => {\r\n        let good = false, itr = 0, rand = 0, hash, sb, hex_digest, rand_arr;\r\n\r\n        if (!last_mine_tx){\r\n            console.error(`Please provide last mine tx`);\r\n            return;\r\n        }\r\n        last_mine_tx = last_mine_tx.substr(0, 16); // only first 8 bytes of txid\r\n        const last_mine_buf = Buffer.from(last_mine_tx, 'hex');\r\n        const is_wam = account.substr(-4) === '.wam';\r\n        // const is_wam = true;\r\n\r\n        console.log(`Performing work with difficulty ${difficulty}, last tx is ${last_mine_tx}...`);\r\n        if (is_wam){\r\n            console.log(`Using WAM account`);\r\n        }\r\n\r\n        const start = (new Date()).getTime();\r\n        let last = 0;\r\n\r\n        while (!good){\r\n            sb = new Serialize.SerialBuffer({\r\n                textEncoder: new TextEncoder,\r\n                textDecoder: new TextDecoder\r\n            });\r\n            sb.pushName(account);\r\n            sb.pushArray(Array.from(last_mine_buf));\r\n            rand_arr = pushRand(sb);\r\n            hash = crypto.createHash(\"sha256\");\r\n            hash.update(sb.array.slice(0, 24));\r\n            hex_digest = hash.digest('hex');\r\n            // console.log(hex_digest);\r\n            if (is_wam){\r\n                // easier for .wam accounts\r\n                good = hex_digest.substr(0, 4) === '0000';\r\n            }\r\n            else {\r\n                // console.log(`non-wam account, mining is harder`)\r\n                good = hex_digest.substr(0, 6) === '000000';\r\n            }\r\n\r\n            if (good) {\r\n                if (is_wam){\r\n                    last = parseInt(hex_digest.substr(4, 1), 16);\r\n                }\r\n                else {\r\n                    last = parseInt(hex_digest.substr(6, 1), 16);\r\n                }\r\n                good &= (last <= difficulty);\r\n                // console.log(hex_digest);\r\n            }\r\n            itr++;\r\n\r\n            if (itr % 50000000 === 0){\r\n                console.log(`Still mining - tried ${itr} iterations`);\r\n            }\r\n\r\n            if (!good){\r\n                // delete sb;\r\n                // delete hash;\r\n            }\r\n\r\n        }\r\n        const end = (new Date()).getTime();\r\n\r\n        // console.log(sb.array.slice(0, 20));\r\n        // const rand_str = Buffer.from(sb.array.slice(16, 24)).toString('hex');\r\n        const rand_str = Array.from(rand_arr).map(i => ('0' + i.toString(16)).slice(-2)).join('');\r\n\r\n        console.log(`Found hash in ${itr} iterations with ${account} ${rand_str}, last = ${last}, hex_digest ${hex_digest} taking ${(end-start) / 1000}s`)\r\n        const mine_work = {account, rand_str, hex_digest};\r\n\r\n        return mine_work;\r\n    };\r\n\r\n\r\n    const doWorkWorker = async (mining_params) => {\r\n        console.log('mining_params', mining_params)\r\n\r\n        const tempDoWOrkWorker = async _message => {\r\n            const getRand = () => {\r\n                const arr = new Uint8Array(8);\r\n                for (let i=0; i < 8; i++){\r\n                    const rand = Math.floor(Math.random() * 255);\r\n                    arr[i] = rand;\r\n                }\r\n                return arr;\r\n            };\r\n    \r\n            const toHex = (buffer) => {\r\n                return [...new Uint8Array (buffer)]\r\n                    .map (b => b.toString (16).padStart (2, \"0\"))\r\n                    .join (\"\");\r\n            };\r\n    \r\n            // console.log('in worker')\r\n            let {mining_account, account, account_str, difficulty, last_mine_tx, last_mine_arr, sb} = _message.data;\r\n            account = account.slice(0, 8);\r\n    \r\n            const is_wam = account_str.substr(-4) === '.wam';\r\n    \r\n            let good = false, itr = 0, rand = 0, hash, hex_digest, rand_arr, last;\r\n    \r\n            console.log(`Performing work with difficulty ${difficulty}, last tx is ${last_mine_tx}...`);\r\n            if (is_wam){\r\n                console.log(`Using WAM account`);\r\n            }\r\n    \r\n            const start = (new Date()).getTime();\r\n    \r\n            while (!good){\r\n                rand_arr = getRand();\r\n    \r\n                // console.log('combining', account, last_mine_arr, rand_arr);\r\n                const combined = new Uint8Array(account.length + last_mine_arr.length + rand_arr.length);\r\n                combined.set(account);\r\n                combined.set(last_mine_arr, account.length);\r\n                combined.set(rand_arr, account.length + last_mine_arr.length);\r\n    \r\n                // hash = crypto.createHash(\"sha256\");\r\n                // hash.update(combined.slice(0, 24));\r\n                // hex_digest = hash.digest('hex');\r\n                // console.log('combined slice', combined.slice(0, 24))\r\n                hash = await crypto.subtle.digest('SHA-256', combined.slice(0, 24));\r\n                // console.log(hash);\r\n                hex_digest = toHex(hash);\r\n                // console.log(hex_digest);\r\n                if (is_wam){\r\n                    // easier for .wam accounts\r\n                    good = hex_digest.substr(0, 4) === '0000';\r\n                }\r\n                else {\r\n                    // console.log(`non-wam account, mining is harder`)\r\n                    good = hex_digest.substr(0, 6) === '000000';\r\n                }\r\n    \r\n                if (good){\r\n                    if (is_wam){\r\n                        last = parseInt(hex_digest.substr(4, 1), 16);\r\n                    }\r\n                    else {\r\n                        last = parseInt(hex_digest.substr(6, 1), 16);\r\n                    }\r\n                    good &= (last <= difficulty);\r\n                    // console.log(hex_digest, good);\r\n                }\r\n                itr++;\r\n    \r\n                if (itr % 1000000 === 0){\r\n                    console.log(`Still mining - tried ${itr} iterations`);\r\n                }\r\n    \r\n                if (!good){\r\n                    hash = null;\r\n                }\r\n    \r\n            }\r\n            const end = (new Date()).getTime();\r\n    \r\n            // console.log(sb.array.slice(0, 20));\r\n            // const rand_str = Buffer.from(sb.array.slice(16, 24)).toString('hex');\r\n            const rand_str = toHex(rand_arr);\r\n    \r\n            console.log(`Found hash in ${itr} iterations with ${account} ${rand_str}, last = ${last}, hex_digest ${hex_digest} taking ${(end-start) / 1000}s`)\r\n            const mine_work = {account: account_str, rand_str, hex_digest};\r\n    \r\n            postMessage(mine_work);\r\n    \r\n            return mine_work;\r\n          }\r\n\r\n\r\n        mining_params.last_mine_tx = mining_params.last_mine_tx.substr(0, 16); // only first 8 bytes of txid\r\n        mining_params.last_mine_arr = fromHexString(mining_params.last_mine_tx);\r\n\r\n        const sb = new Serialize.SerialBuffer({\r\n            textEncoder: new TextEncoder,\r\n            textDecoder: new TextDecoder\r\n        });\r\n        mining_params.sb = sb;\r\n\r\n        mining_params.account_str = mining_params.account;\r\n        mining_params.account = nameToArray(mining_params.account);\r\n\r\n        let b = new Blob([\"onmessage = \" + tempDoWOrkWorker.toString()], {type: \"text/javascript\"});\r\n        let worker = new Worker(URL.createObjectURL(b));\r\n        worker.postMessage(mining_params);\r\n        return await new Promise(resolve => {\r\n            worker.onmessage = (val) => resolve(val.data);\r\n            \r\n        });\r\n    };\r\n\r\n    function sleep(ms) {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n\r\n    const get_bounty_from_tx = async (transaction_id, miner, hyperion_endpoints) => {\r\n        return new Promise(async (resolve, reject) => {\r\n            for (let i = 0; i < 30; i++){\r\n                for (let h = 0; h < hyperion_endpoints.length; h++){\r\n                    const hyp = hyperion_endpoints[h];\r\n                    if (hyp != 'https://wax.eosusa.news')\r\n                    {\r\n                        try {\r\n                            const url = `${hyp}/v2/history/get_transaction?id=${transaction_id}`\r\n                            const t_res = await fetch(url);\r\n                            const t_json = await t_res.json();\r\n                            // console.log(t_json)\r\n                            if (t_json.executed){\r\n                                let amount = 0\r\n                                const amounts = t_json.actions.filter(a => a.act.name === 'transfer').map(a => a.act).filter(a => a.data.to === miner).map(a => a.data.quantity)\r\n                                amounts.forEach(a => amount += parseFloat(a))\r\n                                if (amount > 0){\r\n                                    resolve(`${amount.toFixed(4)} TLM`)\r\n                                    return\r\n                                }\r\n                            }\r\n                        }\r\n                        catch (e){\r\n                            console.log(e.message)\r\n                        }\r\n                    }\r\n\r\n                    await sleep(1000);\r\n                }\r\n\r\n                await sleep(2000);\r\n            }\r\n\r\n            resolve('UNKNOWN');\r\n        });\r\n    }\r\n\r\n\r\n\r\n    const claim = (mining_account, account, account_permission, mine_data, hyperion_endpoints, eos_api) => {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                const actions = [{\r\n                    account: mining_account,\r\n                    name: 'mine',\r\n                    authorization: [{\r\n                        actor: account,\r\n                        permission: account_permission,\r\n                    }],\r\n                    data: mine_data\r\n                }];\r\n                const res = await eos_api.transact({\r\n                    actions\r\n                }, {\r\n                    blocksBehind: 3,\r\n                    expireSeconds: 90,\r\n                });\r\n\r\n                console.log(res.transaction_id)\r\n\r\n                await sleep(4000);const amount = await get_bounty_from_tx(res.transaction_id, account, hyperion_endpoints);\r\n                console.log(`${account} mined ${amount}`)\r\n                resolve(amount);\r\n            }\r\n            catch (e){\r\n                console.log(`Failed to push mine results ${e.message}`);reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    const processRandomQueue = async (mining_account, account, eos_api, permission = 'active') => {\r\n        const actions = [{\r\n            account: mining_account,\r\n            name: 'procrand',\r\n            authorization: [{\r\n                actor: account,\r\n                permission\r\n            }],\r\n            data: { }\r\n        }];\r\n        const res = await eos_api.transact({\r\n            actions\r\n        }, {\r\n            blocksBehind: 3,\r\n            expireSeconds: 90,\r\n        });\r\n\r\n        return res;\r\n\r\n    }\r\n\r\n    const setLandCommission = async (federation_account, owner, land_id, profit_share, eos_api, permission = 'active') => {\r\n        const actions = [{\r\n            account: federation_account,\r\n            name: 'setprofitshr',\r\n            authorization: [{\r\n                actor: owner,\r\n                permission\r\n            }],\r\n            data: {\r\n                owner,\r\n                land_id,\r\n                profit_share\r\n            }\r\n        }];\r\n\r\n        const res = await eos_api.transact({\r\n            actions\r\n        }, {\r\n            blocksBehind: 3,\r\n            expireSeconds: 90,\r\n        });\r\n\r\n        return res;\r\n    };\r\n\r\n    export {\r\n        setPlayerData,\r\n        setTagData,\r\n        getBag,\r\n        setBag,\r\n        getLand,\r\n        getLandById,\r\n        setLand,\r\n        getPlanets,\r\n        getLandByPlanet,\r\n        getPlayerData,\r\n        getLandMiningParams,\r\n        getBagMiningParams,\r\n        getNextMineDelay,\r\n        lastMineTx,\r\n        doWork,\r\n        doWorkWorker,\r\n        processRandomQueue,\r\n        setLandCommission,\r\n        claim,\r\n        get_bounty_from_tx\r\n    }\r\n    ","import  { createContext } from \"react\"; \r\n\r\nconst authContext = createContext();\r\n\r\nexport default authContext;","const atomicassets_account = \"atomicassets\";\r\nconst federation_account = \"federation\";\r\nconst mining_account = \"m.federation\";\r\nconst token_account = \"alien.worlds\";\r\nconst collection = \"alien.worlds\";\r\nconst endpoint = \"https://api.waxsweden.org\";\r\nconst atomic_endpoint = ['https://wax.api.atomicassets.io', 'https://wax3.api.atomicassets.io'];\r\n//const endpoint = \"https://testnet.waxsweden.org\";\r\n//const atomic_endpoint = \"https://test.wax.api.atomicassets.io\";\r\nconst { Api, JsonRpc, RpcError } = require('eosjs');\r\nconst {ExplorerApi, RpcApi} = require(\"atomicassets\");\r\nconst fetch = require('node-fetch');\r\n\r\nconst aa_api = new ExplorerApi(atomic_endpoint[0], atomicassets_account, {\r\n  fetch,\r\n  rateLimit: 4,\r\n});\r\nconst eos_rpc = new JsonRpc(endpoint, { fetch });\r\n\r\nexport {\r\n  federation_account,\r\n  mining_account,\r\n  token_account,\r\n  collection,\r\n  atomic_endpoint,\r\n  aa_api,\r\n  eos_rpc,\r\n};\r\n\r\n","const fetch = require('node-fetch');\r\n\r\nconst stake = async (token_account, federation_account, account, planet_name, quantity, eos_api) => {\r\n    const actions = [{\r\n        account: token_account,\r\n        name: 'transfer',\r\n        authorization: [{\r\n            actor: account,\r\n            permission: 'active',\r\n        }],\r\n        data: {\r\n            from: account,\r\n            to: federation_account,\r\n            quantity,\r\n            memo: 'staking'\r\n        }\r\n    }];\r\n\r\n    actions.push({\r\n        account: federation_account,\r\n        name: 'stake',\r\n        authorization: [{\r\n            actor: account,\r\n            permission: 'active',\r\n        }],\r\n        data: {\r\n            account,\r\n            planet_name,\r\n            quantity\r\n        }\r\n    });\r\n\r\n    const res = await eos_api.transact({\r\n        actions\r\n    }, {\r\n        blocksBehind: 3,\r\n        expireSeconds: 90,\r\n    });\r\n\r\n    return res;\r\n};\r\n\r\n\r\nconst unstake = async (federation_account, token_account, account, planet_name, quantity, eos_api) => {\r\n    const actions = [];\r\n\r\n    // get planet symbol from federation account\r\n    const planet_res = await eos_api.rpc.get_table_rows({code: federation_account, scope: federation_account, table: 'planets', limit: 1, lower_bound: planet_name, upper_bound: planet_name});\r\n\r\n    if (!planet_res.rows.length){\r\n        throw new Error(`Could not find planet ${planet_name}`);\r\n    }\r\n\r\n    const [precision, sym] = planet_res.rows[0].dac_symbol.split(',');\r\n    // fix decimals\r\n    quantity = parseFloat(quantity).toFixed(precision);\r\n    quantity = `${quantity} ${sym}`;\r\n\r\n    actions.push({\r\n        account: token_account,\r\n        name: 'transfer',\r\n        authorization: [{\r\n            actor: account,\r\n            permission: 'active',\r\n        }],\r\n        data: {\r\n            from: account,\r\n            to: federation_account,\r\n            quantity: quantity,\r\n            memo: 'Unstaking'\r\n        }\r\n    });\r\n\r\n    const res = await eos_api.transact({\r\n        actions\r\n    }, {\r\n        blocksBehind: 3,\r\n        expireSeconds: 90,\r\n    });\r\n\r\n    return res;\r\n};\r\n\r\n\r\nconst refund = async (federation_account, account, refund_id, eos_api) => {\r\n    const actions = [];\r\n\r\n    actions.push({\r\n        account: federation_account,\r\n        name: 'refund',\r\n        authorization: [{\r\n            actor: account,\r\n            permission: 'active',\r\n        }],\r\n        data: {\r\n            id: refund_id\r\n        }\r\n    });\r\n\r\n    const res = await eos_api.transact({\r\n        actions\r\n    }, {\r\n        blocksBehind: 3,\r\n        expireSeconds: 90,\r\n    });\r\n\r\n    return res;\r\n};\r\n\r\nconst getMap = async (federation_account, planet_name, eos_api) => {\r\n    const res = await eos_api.rpc.get_table_rows({code: federation_account, scope: planet_name, table: 'maps', limit: 1000});\r\n    const map = [];\r\n    res.rows.forEach((row) => {\r\n        if (typeof map[row.x] === 'undefined'){\r\n            map[row.x] = [];\r\n        }\r\n\r\n        map[row.x][row.y] = row.asset_id;\r\n    });\r\n\r\n    return map;\r\n}\r\n\r\nconst getBalance = async (account, eos_rpc) => {\r\n    const res = await eos_rpc.get_table_rows({code: 'alien.worlds', scope: account, table: 'accounts', limit: 1});\r\n\r\n    let balance = '0.0000 TLM';\r\n    if (res.rows.length){\r\n        balance = res.rows[0].balance;\r\n    }\r\n\r\n    return balance;\r\n}\r\n\r\nconst getStaked = async (federation_account, account, eos_rpc) => {\r\n    // Get a list of the planets and then get balance for each\r\n    const planets_res = await eos_rpc.get_table_rows({code: federation_account, scope: federation_account, table: 'planets', limit: 100});\r\n\r\n    const bal_res = await eos_rpc.get_currency_balance('token.worlds', account);\r\n\r\n    const planet_tokens = {};\r\n    let total = 0;\r\n\r\n    if (planets_res.rows.length){\r\n        planets_res.rows.forEach((p) => {\r\n            if (p.active){\r\n                const planet_sym = p.dac_symbol.split(',')[1];\r\n                let planet_balance = `0.0000 ${planet_sym}`;\r\n                bal_res.forEach((bal_str) => {\r\n                    const [amount, sym] = bal_str.split(' ');\r\n                    if (planet_sym === sym){\r\n                        planet_balance = bal_str;\r\n                    }\r\n                });\r\n                const [amount, symbol] = planet_balance.split(' ');\r\n\r\n                planet_tokens[p.planet_name] = {amount, symbol};\r\n\r\n                total += parseFloat(amount);\r\n            }\r\n        });\r\n    }\r\n\r\n    const planet_tokens_a = [];\r\n    for (let p in planet_tokens){\r\n        const pa = planet_tokens[p];\r\n        pa.planet_name = p;\r\n        planet_tokens_a.push(pa);\r\n    }\r\n\r\n    return {staked: planet_tokens_a, total};\r\n}\r\n\r\nconst getUnstakes = async (federation_account, account, eos_rpc) => {\r\n    const refunds_res = await eos_rpc.get_table_rows({\r\n        code: federation_account,\r\n        scope: federation_account,\r\n        table: 'refunds',\r\n        index_position: 2,\r\n        key_type: 'i64',\r\n        upper_bound: account,\r\n        lower_bound: account,\r\n        limit: 100\r\n    });\r\n\r\n    return refunds_res.rows;\r\n}\r\n\r\nconst getAssets = async (account, aa_endpoints, collection, schema = '', tries = 0) => {\r\n    if (typeof aa_endpoints === 'string'){\r\n        aa_endpoints = [aa_endpoints];\r\n    }\r\n    let aa_endpoint = aa_endpoints[tries];\r\n    console.log(`Trying endpoint ${aa_endpoint} for try ${tries}`);\r\n\r\n    try {\r\n        let url = `${aa_endpoint}/atomicassets/v1/assets?collection_name=${collection}&owner=${account}&limit=200`\r\n        if (schema){\r\n            url += `&schema_name=${schema}`\r\n        }\r\n        const res = await fetch(url);\r\n        const res_json = await res.json();\r\n        // console.log(res_json);\r\n        if (typeof res_json !== 'object') {\r\n            throw new Error('There was a temporary error on the server, please wait a few minutes and refresh the page to try again');\r\n        }\r\n        if (res_json.errors && res_json.errors.length){\r\n            // console.log(res_json.errors[0].extensions);\r\n            if (res_json.errors[0].extensions.code === 'rate-limit'){\r\n                throw new Error('The server is currently overloaded, please wait a few minutes and refresh the page to try again');\r\n            }\r\n            else {\r\n                throw new Error(res_json.errors[0].message);\r\n            }\r\n        }\r\n\r\n        if (res_json.success === false){\r\n            throw new Error(res_json.message);\r\n        }\r\n        const assets = res_json.data;\r\n\r\n        const tools_map = new Map();\r\n        for (let a=0; a<assets.length; a++){\r\n            const asset = assets[a];\r\n            if (schema === 'land.worlds'){\r\n                tools_map.set(asset.asset_id, asset);\r\n            }\r\n            else {\r\n                const identifier = `${asset.data.cardid}|${asset.data.shine}`;\r\n                asset.quantity = 1;\r\n                if (!tools_map.has(identifier)){\r\n                    asset.asset_ids = [asset.asset_id];\r\n                    delete asset.asset_id;\r\n                    tools_map.set(identifier, {owner: asset.owner, data: asset.data, asset_ids: asset.asset_ids, quantity: asset.quantity});\r\n                }\r\n                else {\r\n                    const tool = tools_map.get(identifier);\r\n                    tool.asset_ids.push(asset.asset_id);\r\n                    tool.quantity++;\r\n                    tools_map.set(identifier, tool);\r\n                }\r\n            }\r\n        }\r\n\r\n        return Array.from(tools_map.values());\r\n    }\r\n    catch (e){\r\n        let error_msg = e.message\r\n        console.error(error_msg);\r\n\r\n        if (tries >= aa_endpoints.length - 1){\r\n            throw e;\r\n        }\r\n        else {\r\n            return await getAssets(account, aa_endpoints, collection, schema, ++tries)\r\n        }\r\n    }\r\n}\r\n\r\nconst getAssetsGraph = async (account, aa_endpoints, collection, schema = '', tries = 0) => {\r\n    if (typeof aa_endpoints === 'string'){\r\n        aa_endpoints = [aa_endpoints];\r\n    }\r\n    let aa_endpoint = aa_endpoints[tries];\r\n    console.log(`Trying endpoint ${aa_endpoint} for try ${tries}`);\r\n    const query_obj = {\r\n        \"query\":`query ToolsQuery {\r\n          atomicassets_assets(where: {owner: {_eq: \"${account}\"}, collection_name: {_eq: \"${collection}\"}, schema_name: {_eq: \"${schema}\"}}, limit: 1000) {\r\n            asset_id\r\n            atomicassets_asset_data {\r\n              data\r\n            }\r\n            owner\r\n          }\r\n        }\r\n        `,\r\n        \"variables\":null,\r\n        \"operationName\":\"ToolsQuery\"\r\n    }\r\n\r\n    try {\r\n        const res = await fetch(`${aa_endpoint}/v1/graphql`, {\r\n            method: 'POST',\r\n            body: JSON.stringify(query_obj),\r\n            headers: { 'Content-Type': 'application/json' }\r\n        });\r\n        const res_json = await res.json();\r\n        // console.log(res_json);\r\n        if (typeof res_json !== 'object') {\r\n            throw new Error('There was a temporary error on the server, please wait a few minutes and refresh the page to try again');\r\n        }\r\n        if (res_json.errors && res_json.errors.length){\r\n            // console.log(res_json.errors[0].extensions);\r\n            if (res_json.errors[0].extensions.code === 'rate-limit'){\r\n                throw new Error('The server is currently overloaded, please wait a few minutes and refresh the page to try again');\r\n            }\r\n            else {\r\n                throw new Error(res_json.errors[0].message);\r\n            }\r\n        }\r\n        // return res_json;\r\n        // console.log(res_json);\r\n        if (res_json.success === false){\r\n            throw new Error(res_json.message);\r\n        }\r\n        const assets = res_json.data.atomicassets_assets;\r\n        // console.log(assets);\r\n\r\n        const tools_map = new Map();\r\n        // const assets = await aa_api.getAssets({owner: account, collection_name: collection, schema_name: schema}, 1, 1000);\r\n        for (let a=0; a<assets.length; a++){\r\n            const asset = assets[a];\r\n            // console.log(asset.atomicassets_asset_data);\r\n            // asset.atomicassets_asset_data = null;\r\n            if (!asset.atomicassets_asset_data){\r\n                // console.log(`Do not have AA data`, aa_endpoint, asset.asset_id);\r\n                const data_url = `${aa_endpoint}/atomicassets/v1/assets/${asset.asset_id}`;\r\n                const data_res = await fetch(data_url);\r\n                const data_json = await data_res.json();\r\n                // console.log(data_json);\r\n                asset.atomicassets_asset_data = data_json.data;\r\n                // continue;\r\n            }\r\n            asset.data = asset.atomicassets_asset_data.data;\r\n            delete asset.atomicassets_asset_data;\r\n            // console.log(asset);\r\n            // continue;\r\n\r\n            if (schema === 'land.worlds'){\r\n                tools_map.set(asset.asset_id, asset);\r\n            }\r\n            else {\r\n                const identifier = `${asset.data.cardid}|${asset.data.shine}`;\r\n                asset.quantity = 1;\r\n                if (!tools_map.has(identifier)){\r\n                    asset.asset_ids = [asset.asset_id];\r\n                    delete asset.asset_id;\r\n                    tools_map.set(identifier, asset);\r\n                }\r\n                else {\r\n                    const tool = tools_map.get(identifier);\r\n                    tool.asset_ids.push(asset.asset_id);\r\n                    tool.quantity++;\r\n                    tools_map.set(identifier, tool);\r\n                }\r\n            }\r\n        }\r\n\r\n        return Array.from(tools_map.values());\r\n    }\r\n    catch (e){\r\n        let error_msg = e.message\r\n        console.error(error_msg);\r\n\r\n        if (tries >= aa_endpoints.length - 1){\r\n            throw e;\r\n        }\r\n        else {\r\n            return await getAssets(account, aa_endpoints, collection, schema, ++tries)\r\n        }\r\n    }\r\n}\r\n\r\nconst agreeTerms = async (federation_account, account, terms_id, terms_hash, eos_api) => {\r\n    const actions = [];\r\n\r\n    actions.push({\r\n        account: federation_account,\r\n        name: 'agreeterms',\r\n        authorization: [{\r\n            actor: account,\r\n            permission: 'active',\r\n        }],\r\n        data: {\r\n            account,\r\n            terms_id,\r\n            terms_hash\r\n        }\r\n    });\r\n\r\n    const res = await eos_api.transact({\r\n        actions\r\n    }, {\r\n        blocksBehind: 3,\r\n        expireSeconds: 90,\r\n    });\r\n\r\n    return res;\r\n}\r\n\r\nconst agreedTermsVersion = async (federation_account, account, eos_rpc) => {\r\n    const terms_res = await eos_rpc.get_table_rows({\r\n        code: federation_account,\r\n        scope: federation_account,\r\n        table: 'userterms',\r\n        upper_bound: account,\r\n        lower_bound: account,\r\n        limit: 1\r\n    });\r\n\r\n    if (terms_res.rows.length){\r\n        return terms_res.rows[0].terms_id;\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\nconst axon = require('axon');\r\n\r\nconst subscribe = async (account, callback, ws_host = 'api-ws.alienworlds.io', ws_port = 3000, test = false) => {\r\n    const sock = axon.socket('sub-emitter');\r\n\r\n    sock.connect(ws_port, ws_host);\r\n\r\n    const sub = (test)?`test:test`:`asset:${account}`;\r\n\r\n    sock.on(sub, function(msg){\r\n        if (msg && msg.action === 'mint'){\r\n            callback(msg);\r\n        }\r\n    });\r\n}\r\n\r\nexport { stake, unstake, refund, getMap, getBalance, getStaked, getUnstakes, subscribe, getAssets, getAssetsGraph, agreeTerms, agreedTermsVersion }\r\n\r\n\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Progress, Row, Col, InputNumber,Checkbox, Collapse, Input  } from 'antd';\r\nimport {LoadingOutlined, CheckCircleFilled, CloseCircleFilled} from '@ant-design/icons';\r\nimport authContext from '../context/Auth';\r\nimport dayjs from 'dayjs';\r\nimport * as waxjs from \"@waxio/waxjs/dist\";\r\n\r\nimport { federation_account, mining_account, token_account, collection, atomic_endpoint, aa_api, eos_rpc } from '../alienworld/AWConstants';\r\nimport * as awmine from '../alienworld/AWMine';\r\n// import { setPlayerData, setTagData, getBag, setBag, getLand, getLandById, setLand, getPlanets, getLandByPlanet, getPlayerData, getLandMiningParams, getBagMiningParams, getNextMineDelay, lastMineTx, doWork, doWorkWorker, processRandomQueue, setLandCommission, claim, get_bounty_from_tx } from '../alienworld/AWMine';\r\nimport { stake, unstake, refund, getMap, getBalance, getStaked, getUnstakes, subscribe, getAssets, getAssetsGraph, agreeTerms, agreedTermsVersion } from '../alienworld/AWFederation';\r\n\r\nconst { Panel } = Collapse;\r\nconst { TextArea } = Input;\r\nconst wax = new waxjs.WaxJS('https://api.waxsweden.org');\r\n\r\n\r\nconst Home = () => {\r\n    let auth = useContext(authContext);\r\n    const federation_account = 'federation';\r\n\r\n    let secloop = 10000;\r\n    const listHour = ['0','1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23'];\r\n\r\n    const [maxCPU, setMaxCPU] = useState(90);\r\n    const [ac, setAC] = useState(auth.account);\r\n    const [waxp, setWax] = useState('0 WAX');\r\n    const [tlm, setTlm] = useState('0 TLM');\r\n    const [cpu, setCpu] = useState(100)\r\n    const [ram, setRam] = useState(100)\r\n    const [net, setNet] = useState(100)\r\n    const [items, setItems] = useState([]);\r\n    const [mybag, setMyBag] = useState([]);\r\n    const [map, setMap] = useState('');\r\n    const [delay, setDelay] = useState('');\r\n    const [status, setStatus] = useState('Loading...');\r\n    const [historyMine, setHistoryMine] = useState([]);\r\n    const [checkTime, setCheckTime] = useState(['7', '8', '9', '10', '11', '13', '14', '15', '16', '17', '19', '20', '21', '22', '23']);\r\n\r\n    \r\n    const [mineing, setMineing] = useState(false);\r\n    const [claiming, setClaiming] = useState(false);\r\n    const [condition, setCondition] = useState({\r\n        time: (checkTime.includes(dayjs().hour().toString())===true),\r\n        delay: false,\r\n        cpu: false\r\n    })\r\n    \r\n\r\n    const getWax = () => {\r\n        let params = { code: \"eosio.token\", account: ac, symbol: \"WAX\" };\r\n        axios.post('https://wax.greymass.com/v1/chain/get_currency_balance', JSON.stringify(params)).then(res => {\r\n            if (res?.data.length === 1) {\r\n                auth.wax = res.data[0];\r\n                setWax(res.data[0]);\r\n            }\r\n        })\r\n        return true;\r\n    }\r\n    const getTLM = () => {\r\n        let params = {json:true,code:\"alien.worlds\",scope:ac,table:\"accounts\",table_key:\"\",\"lower_bound\":\"\",upper_bound:\"\",index_position:1,key_type:\"\",limit:1,reverse:false,show_payer:false};\r\n        axios.post('https://api.waxsweden.org/v1/chain/get_table_rows', params).then(res => {\r\n            if (res?.data.rows.length >= 1) {\r\n                auth.tlm = res.data?.rows[0]?.balance;\r\n                setTlm(res.data?.rows[0]?.balance);\r\n            }\r\n        })\r\n        return true;\r\n    }\r\n    const getItem = () => {\r\n        axios.get(`https://wax.api.atomicassets.io/atomicassets/v1/assets?owner=${ac}&page=1&limit=10000&order=desc&sort=asset_id`)\r\n            .then(res => {\r\n                let objItem = res.data.data.filter(f => f.schema.schema_name === \"tool.worlds\").map(v => ({ code: v.asset_id, name: v.name }));\r\n                setItems(objItem);\r\n            })\r\n        \r\n    }\r\n    const getCPURAM = () => {\r\n        let params = {\"account_name\":ac};\r\n        axios.post('https://api.waxsweden.org/v1/chain/get_account', params).then(res => {\r\n            let tempCPU = ((res.data.cpu_limit.used / res.data.cpu_limit.max) * 100).toFixed(2).toString();\r\n            let tempRAM = ((res.data.ram_usage / res.data.ram_quota) * 100).toFixed(2).toString();\r\n            let tempNET = ((res.data.net_limit.used / res.data.net_limit.max) * 100).toFixed(2).toString();\r\n            setCpu(+tempCPU);\r\n            setRam(+tempRAM);\r\n            setNet(+tempNET);\r\n        })\r\n    }\r\n\r\n    const checkAll = (ch) => {\r\n        if (ch) {\r\n            setCheckTime(listHour);\r\n        } else {\r\n            setCheckTime([]);\r\n        }\r\n    }\r\n    const checkOnce = (ch, val) => {\r\n        if (ch) {\r\n            setCheckTime([...checkTime, val]);\r\n        } else {\r\n            setCheckTime([...checkTime.filter(f => f!==val)]);\r\n        }\r\n    }\r\n    \r\n    \r\n\r\n    const awGetMineDelay = async (account) => {\r\n        try {\r\n            console.log(wax);\r\n            setStatus('Get delay')\r\n            const bag = await awmine.getBag(mining_account, account, wax.api.rpc, aa_api);\r\n            setStatus('Get bag')\r\n            const land = await awmine.getLand(federation_account, mining_account, account, wax.api.rpc, aa_api);\r\n            setStatus('Get land')\r\n\r\n            setItems(bag.filter(f => f.schema.schema_name === \"tool.worlds\").map(v => ({ code: v.asset_id, name: v.name })));\r\n            setMyBag(bag);\r\n            setMap(`${land.asset_id} : ${land.name} (${land.data.x}x${land.data.y}) (Com.${land.data.commission / 100}%)`);\r\n            \r\n            const params = awmine.getBagMiningParams(bag);\r\n            const land_params = awmine.getLandMiningParams(land);\r\n            params.delay *= land_params.delay / 10;\r\n            params.difficulty += land_params.difficulty;\r\n            setStatus('Get next time mine')\r\n            var minedelay = await awmine.getNextMineDelay(mining_account, account, params, wax.api.rpc);\r\n            return minedelay;\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    };\r\n    \r\n    const awGetPlayer = async (account) => {\r\n        try {\r\n            var data = await awmine.getPlayerData(\r\n              federation_account,\r\n              account,\r\n              wax.api.rpc,\r\n              aa_api\r\n            );\r\n            console.log(data)\r\n        } catch (e) {\r\n            console.log('Fail get player data',e);\r\n        }\r\n    }\r\n\r\n    const awSetBag = async (account, bag) => {\r\n        try {\r\n            var items = JSON.parse(bag).items;\r\n            if (items === undefined) throw new Error('missing items');\r\n            if (items.length < 1 || items.length > 3)\r\n            throw new Error('bag size must be [1-3]');\r\n            \r\n            await awmine.setBag(mining_account, account, items, wax.api);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n    const awGetBag = async (account) =>  {\r\n        try {\r\n          var data = await awmine.getBag(mining_account, account, wax.api.rpc, aa_api);\r\n            console.log(data);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n    \r\n    const awGetData = async () => {\r\n        let d = await awGetMineDelay(ac);\r\n        let seconds = Math.floor(d / 1000)\r\n        let time = setInterval(() => {\r\n            console.log(`Loop delay ${seconds} sec`)\r\n            console.log(condition);\r\n            let min = Math.floor(seconds / 60);\r\n            let hour;\r\n            if (min >= 60) {\r\n                hour = Math.floor(min / 60);\r\n            }\r\n            let sec = seconds - (min * 60);\r\n            if (seconds === 0) {\r\n                setDelay('');\r\n                console.log('clear time');\r\n                clearInterval(time);\r\n                console.log(condition);\r\n                setCondition({ ...condition, delay: true });\r\n            } else {\r\n                seconds--;\r\n                setDelay(`${(hour?hour.toString().padStart(2,'0')+':':'')}${min.toString().padStart(2,'0')}:${sec.toString().padStart(2,'0')}`);  \r\n            }\r\n        }, 1000);\r\n        \r\n\r\n    }\r\n\r\n    const getBagDifficulty = async (account) => {\r\n        try {\r\n          const bag = await awmine.getBag(mining_account, account, wax.api.rpc, aa_api);\r\n          const params = awmine.getBagMiningParams(bag);\r\n          return params.difficulty;\r\n        } catch (error) {\r\n          return error;\r\n        }\r\n      };\r\n      \r\n    const getLandDifficulty = async (account) => {\r\n        try {\r\n          const land = await awmine.getLand(\r\n            federation_account,\r\n            mining_account,\r\n            account,\r\n            wax.api.rpc,\r\n            aa_api\r\n          );\r\n          const params = awmine.getLandMiningParams(land);\r\n          return params.difficulty;\r\n        } catch (error) {\r\n          return error;\r\n        }\r\n      };\r\n    const background_mine = async (account) => {\r\n        return new Promise(async (resolve, reject) => {\r\n          const bagDifficulty = await getBagDifficulty(account);\r\n          const landDifficulty = await getLandDifficulty(account);\r\n          const difficulty = bagDifficulty + landDifficulty;\r\n            console.log('difficulty', difficulty);\r\n      \r\n          console.log('start doWork = ' + Date.now());\r\n          const last_mine_tx = await awmine.lastMineTx(mining_account, account, wax.api.rpc);\r\n\r\n            awmine.doWorkWorker({ mining_account, account, difficulty, last_mine_tx })\r\n                .then((mine_work) => {\r\n                    console.log('end doWork = ' + Date.now());\r\n                    console.log(mine_work);\r\n                    //   setStatus(`Mine data ${JSON.stringify(mine_work)}`);\r\n                    resolve(mine_work);\r\n                })\r\n                .catch(e => reject(e));\r\n        });\r\n    };\r\n\r\n    const server_claim2 = async (mining_account1, account, account_permission, mine_data1, hyperion_endpoints) => {\r\n        console.log(mining_account1);\r\n        console.log(account);\r\n        console.log(account_permission);\r\n        console.log(mine_data1);\r\n        console.log(hyperion_endpoints);\r\n        try {\r\n            var mine_work = JSON.parse(mine_data1);\r\n            const mine_data = {\r\n                miner: mine_work.account,\r\n                nonce: mine_work.rand_str,\r\n            };\r\n            console.log(\"Claiming Now\");\r\n            const claimData = await claim(mining_account,account, 'active', mine_data, hyperion_endpoints, wax.api);\r\n            console.log(\"Claim Data\" + claimData);\r\n            setStatus('Claiming...')\r\n            setStatus(`Claim data : ${claimData.toString()}`)\r\n        } catch (error) {\r\n            console.log(error);\r\n            setStatus('claim fail');\r\n        }\r\n    }\r\n    const claim = (mining_account, account, account_permission, mine_data, hyperion_endpoints, eos_api) => {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                const actions = [{\r\n                    account: mining_account,\r\n                    name: 'mine',\r\n                    authorization: [{\r\n                        actor: account,\r\n                        permission: account_permission,\r\n                    }],\r\n                    data: mine_data\r\n                }];\r\n                const res = await eos_api.transact({\r\n                    actions\r\n                }, {\r\n                    blocksBehind: 3,\r\n                    expireSeconds: 90,\r\n                });\r\n    \r\n                console.log(res.transaction_id)\r\n\r\n                setStatus('Transaction claiming')\r\n                setMineing(false);\r\n                setCondition({ ...condition, delay: false });\r\n                (async()=>awGetData())()\r\n    \r\n                resolve(res.transaction_id);\r\n            }\r\n            catch (e){\r\n                console.log(`Failed to push mine results ${e.message}`);\r\n                reject(e);\r\n            }\r\n        });\r\n    }\r\n    const getBountyFromTx = async (transaction_id, miner, hyperion_endpoints) => {\r\n        // temporary fix\r\n        // await sleep(4000);\r\n\r\n        return new Promise(async (resolve, reject) => {\r\n            for (let i = 0; i < 30; i++){\r\n                for (let h = 0; h < hyperion_endpoints.length; h++){\r\n                    const hyp = hyperion_endpoints[h];\r\n                    if (hyp != 'https://wax.eosusa.news')\r\n                    {\r\n                        try {\r\n                            const url = `${hyp}/v2/history/get_transaction?id=${transaction_id}`\r\n                            const t_res = await fetch(url);\r\n                            const t_json = await t_res.json();\r\n                            // console.log(t_json)\r\n                            if (t_json.executed){\r\n                                let amount = 0\r\n                                const amounts = t_json.actions.filter(a => a.act.name === 'transfer').map(a => a.act).filter(a => a.data.to === miner).map(a => a.data.quantity)\r\n                                amounts.forEach(a => amount += parseFloat(a))\r\n                                if (amount > 0){\r\n                                    resolve(`${amount.toFixed(4)} TLM`)\r\n                                    return\r\n                                }\r\n                            }\r\n                        }\r\n                        catch (e){\r\n                            console.log(e.message)\r\n                        }\r\n                    }\r\n\r\n                    // await sleep(1000);\r\n                }\r\n\r\n                // await sleep(2000);\r\n            }\r\n\r\n            resolve('UNKNOWN');\r\n        });\r\n    }\r\n\r\n    const sleep = async (ms) => {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n      \r\n\r\n    const awMine = () => {\r\n        try {\r\n            background_mine(ac)\r\n                .then((mine_work) => {\r\n                    (async () => {\r\n                        // await server_claim2(mining_account, ac, 'active',  JSON.stringify(mine_work), [\"https://api.waxsweden.org\", \"https://wax.eosrio.io\"])\r\n                        awTransection(JSON.stringify(mine_work));\r\n                    })()\r\n                })\r\n        } catch (error) {\r\n            console.log(error);\r\n            setStatus(`Fail mining!!`);\r\n        }\r\n    }\r\n\r\n    const awTransection = (data) => {\r\n        var mine_work = JSON.parse(data);\r\n        try {\r\n          console.log(`${mine_work.account} Pushing mine results...`);\r\n            setStatus(`Pushing transection.`);\r\n          const mine_data = {\r\n            miner: mine_work.account,\r\n            nonce: mine_work.rand_str,\r\n          };\r\n      \r\n          console.log('mine_data', mine_data);\r\n      \r\n          const actions = [\r\n            {\r\n              account: mining_account,\r\n              name: 'mine',\r\n              authorization: [\r\n                {\r\n                  actor: mine_work.account,\r\n                  permission: 'active',\r\n                },\r\n              ],\r\n              data: mine_data,\r\n            },\r\n          ];\r\n          \r\n                wax.api\r\n                .transact(\r\n                  {\r\n                    actions,\r\n                  },\r\n                  {\r\n                    blocksBehind: 3,\r\n                    expireSeconds: 90,\r\n                  }\r\n                )\r\n                .then((result) => {\r\n                  console.log('result is=', result);\r\n          \r\n                  var amounts = new Map();\r\n                  if (result && result.processed) {\r\n                    let mined_amount = 0;\r\n                    result.processed.action_traces[0].inline_traces.forEach((t) => {\r\n                        if (t.act.account === 'alien.worlds' && t.act.name === 'transfer' && t.act.data.to === mine_work.account){\r\n                        const [amount_str] = t.act.data.quantity.split(' ');\r\n                        mined_amount += parseFloat(amount_str);        \r\n                        }\r\n                    });\r\n                  \r\n                    console.log(`${mined_amount.toFixed(4)} TLM`);\r\n                      setStatus(`Mine success!! ${mined_amount.toFixed(4)} TLM`);\r\n                    //   setHistoryMine([...historyMine,]);\r\n                      historyMine.push(`${dayjs().format('YYYY-MM-DD HH:mm:ss')} ${mined_amount.toFixed(4)} TLM`);\r\n                      setMineing(false);\r\n                      setCondition({ ...condition, delay: false });\r\n                      (async()=>awGetData())()\r\n                  }\r\n                }).catch((err) => {\r\n                    console.log(err);\r\n                    setStatus(`${err}`);\r\n                });\r\n        } catch (error) {\r\n            console.log(error);\r\n            setStatus(`Fail push transection!!`);\r\n        }\r\n    }\r\n    \r\n    useEffect(() => {\r\n        console.log(historyMine)\r\n    }, [historyMine])\r\n    useEffect(() => {\r\n        if (checkTime.includes(dayjs().hour().toString())===true) {\r\n            setCondition({ ...condition, time: true });\r\n        } else {\r\n            setCondition({ ...condition, time: false });\r\n        }\r\n    }, [checkTime])\r\n    useEffect(() => {\r\n        if (cpu <= maxCPU) {\r\n            setCondition({ ...condition, cpu: true });\r\n        } else {\r\n            setCondition({ ...condition, cpu: false });\r\n        }\r\n    }, [cpu]);\r\n    useEffect(() => {\r\n        console.log((checkTime.includes(dayjs().hour().toString())===true), checkTime, dayjs().hour().toString());\r\n        console.log('condition', condition);\r\n        if (condition.time === false) {\r\n            setStatus('Time to offline');\r\n        } else if (condition.delay === false) {\r\n            setStatus('Waiting...');\r\n        } else if (condition.cpu === false) {\r\n            setStatus(`Waiting checking cpu every 15 sec.`);\r\n        } else {\r\n            if (mineing) {\r\n                setStatus(`Minging...`);\r\n            } else {\r\n                setMineing(true);\r\n                setStatus(`Time to mine`);\r\n                awMine()\r\n            }\r\n            \r\n        }\r\n    }, [condition])\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            if (wax?.api) {\r\n                setStatus(`Login ${ac}`)\r\n                getWax();\r\n                getTLM();\r\n                getCPURAM();\r\n                await awGetData();\r\n            }\r\n        })()\r\n        \r\n        let timer = window.setInterval(() => {\r\n            console.log('get cpu every 15 sec.')\r\n            getCPURAM()\r\n        }, 15000)\r\n        return () => {\r\n            window.clearInterval(timer);\r\n        };\r\n    }, [wax,ac])\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            setStatus('Login...')\r\n            const user = await wax.login();\r\n            setAC(user);\r\n        })()\r\n    }, [])\r\n    \r\n    return (\r\n        <div>\r\n            <h1>{ac ? `Hi, ${ac}`: 'Wait auto login'}</h1>\r\n            <p>{tlm} / {waxp} </p>\r\n            <p>Status : {status}</p>\r\n            <Row gutter={[4, 4]}>\r\n                <Col span={8}>\r\n                    <p>Delay :<br />{condition.delay ?<CheckCircleFilled style={{color:'green'}} />:<CloseCircleFilled style={{color:'red'}}  />} {`${delay}`}</p>\r\n                </Col>\r\n                <Col span={8}>\r\n                    <p>Time :<br />{condition.time ?<CheckCircleFilled style={{color:'green'}} />:<CloseCircleFilled style={{color:'red'}}  />} {condition.time===false ? 'Offline' : 'Online'}</p>\r\n                </Col>\r\n                <Col span={8}>\r\n                    <p>CPU :<br />{condition.cpu ?<CheckCircleFilled style={{color:'green'}} />:<CloseCircleFilled style={{color:'red'}}  />} {`${cpu.toFixed(0)}/${maxCPU} %`}</p>\r\n                </Col>\r\n            </Row>\r\n            <Row gutter={[12,12]} style={{marginBottom:'15px'}}>\r\n                <Col span={24}>\r\n                    <div>\r\n                        <span style={{marginRight:'5px'}}>CPU / MAX : <InputNumber onChange={v=>setMaxCPU(v)} min={1} max={99} defaultValue={maxCPU} bordered={false} /></span>\r\n                        <Progress percent={cpu} status={(cpu>maxCPU?'exception':'active')} />\r\n                    </div>\r\n                    <div>\r\n                        <span style={{marginRight:'5px'}}>RAM</span>\r\n                        <Progress percent={ram} status={ram>90?'exception':'active'}  />\r\n                    </div>\r\n                    <div>\r\n                        <span style={{marginRight:'5px'}}>NET</span>\r\n                        <Progress percent={net} status={ram>90?'exception':'active'} />\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <Row gutter={[12, 12]}>\r\n                <Col span={24}>\r\n                    {map}\r\n                </Col>\r\n                <Col span={24}>\r\n                    {items && items.map((v, i) => <p key={i} style={{ marginBottom: 0}}>{`${v.code} : ${v.name}`}</p>)}\r\n                </Col>\r\n                <Col span={24}>\r\n                    <TextArea rows={4} bordered={false} placeholder={'History mine ..'} value={historyMine.map((v, i) => <span key={i}>{v}</span>)} />\r\n                </Col>\r\n                <Col span={24}>\r\n                    <Collapse ghost expandIcon={() => ''}>\r\n                        <Panel header=\"Config time online\" key=\"1\">\r\n                            <div key={'all'}><Checkbox onChange={v => checkAll(v.target.checked)}>{`All`}</Checkbox></div>\r\n                            {\r\n                                listHour.map((h, i) => {\r\n                                    return <div key={i}><Checkbox onChange={v => checkOnce(v.target.checked, h)} checked={!!checkTime.find(f => f === h)}>{`${h.toString().padStart(2,'0')}:00-${h.toString().padStart(2,'0')}:59`}</Checkbox></div>\r\n                                })\r\n                            }\r\n                        </Panel>\r\n                    </Collapse>\r\n                </Col>\r\n            </Row>\r\n\r\n\r\n            \r\n        \r\n            \r\n            \r\n           \r\n\r\n         \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Layout, Menu, Row, Col, Input, Table, Space, message, Progress, InputNumber   } from 'antd';\r\nimport { PlusOutlined, DeleteOutlined } from '@ant-design/icons';\r\nimport axios from 'axios';\r\nimport dayjs from 'dayjs';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport utc from 'dayjs/plugin/utc';\r\nimport timezone from 'dayjs/plugin/timezone';\r\ndayjs.extend(relativeTime)\r\ndayjs.extend(utc)\r\ndayjs.extend(timezone)\r\nconst { Header, Content, Footer } = Layout;\r\nconst { Search } = Input;\r\n\r\n\r\n\r\nconst AWAccount = () => {\r\n\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [datas, setDatas] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [sec, setSec] = useState(10);\r\n  const [timeoutID, setTimeoutID] = useState(null);\r\n  const [txtSearch, setTxtSearch] = useState('');\r\n  const [allWax, setAllWax] = useState(0);\r\n  const [allTlm, setAllTlm] = useState(0);\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Account',\r\n      dataIndex: 'account',\r\n      key: 'account',\r\n    },\r\n    {\r\n      title: 'CPU',\r\n      dataIndex: 'cpu',\r\n      key: 'cpu',\r\n      width: '20%',\r\n      render: cpu => <Progress percent={cpu} strokeColor={cpu > 90 ? 'red' : ''} format={(percent,successPercent) => `${percent}%`} style={{width:'100%'}} />\r\n    },\r\n    {\r\n      title: 'RAM',\r\n      dataIndex: 'ram',\r\n      key: 'ram',\r\n      width: '20%',\r\n      responsive: ['md'],\r\n      render: ram => <Progress percent={ram} strokeColor={ram > 90 ? 'red' : ''} format={(percent,successPercent) => `${percent}%`} style={{width:'100%'}} />\r\n    },\r\n    {\r\n      title: `TLM ${allTlm}`,\r\n      dataIndex: 'tlm',\r\n      key: 'tlm',\r\n    },\r\n    {\r\n      title: `WAX ${allWax}`,\r\n      dataIndex: 'wax',\r\n      key: 'wax',\r\n      responsive: ['md'], \r\n    },\r\n    {\r\n      title: `Last Mine`,\r\n      dataIndex: 'last',\r\n      key: 'wax',\r\n    },\r\n    {\r\n      title: 'Remove',\r\n      key: 'action',\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <a onClick={() => clearAccount(record)}><DeleteOutlined style={{color:'red'}} /></a>\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const clearAccount = (acc) => {\r\n    console.log(acc)\r\n    setAccounts(accounts.filter(f => f !== acc.account));\r\n    setDatas(datas.filter(f => f.account !== acc.account))\r\n  }\r\n\r\n  const getAccountInfo = async (accs) => {\r\n    let all = accs.map(acc => {\r\n      let request1 = axios.post('https://api.waxsweden.org/v1/chain/get_account', { \"account_name\": acc });\r\n      let request2 = axios.post('https://api.waxsweden.org/v1/chain/get_table_rows', { \"json\": true, \"code\": \"alien.worlds\", \"scope\": acc, \"table\": \"accounts\", \"table_key\": \"\", \"lower_bound\": \"\", \"upper_bound\": \"\", \"index_position\": 1, \"key_type\": \"\", \"limit\": 1, \"reverse\": false, \"show_payer\": false });\r\n      let request3 = axios.post('https://api.waxsweden.org/v1/chain/get_table_rows', {\"json\":true,\"code\":\"m.federation\",\"scope\":\"m.federation\",\"table\":\"miners\",\"table_key\":\"\",\"lower_bound\":acc,\"upper_bound\":acc,\"index_position\":1,\"key_type\":\"\",\"limit\":10,\"reverse\":false,\"show_payer\":false});\r\n      return axios.all([request1, request2, request3])\r\n        .then(\r\n          axios.spread((...responses) => {\r\n            let w = responses[0].data.core_liquid_balance.split(' ');\r\n            let t = responses[1].data.rows[0].balance.split(' ');\r\n              // console.log( dayjs().to(dayjs(responses[2].data.rows[0].last_mine).add(7,'hour').toISOString()) );\r\n            // console.log(responses[0].data.account_name, +((responses[0].data.cpu_limit.used / responses[0].data.cpu_limit.max) * 100).toFixed(0))\r\n            return {\r\n              account: responses[0].data.account_name,\r\n              cpu: +((responses[0].data.cpu_limit.used / responses[0].data.cpu_limit.max) * 100).toFixed(0),\r\n              ram: +((responses[0].data.ram_usage / responses[0].data.ram_quota) * 100).toFixed(0),\r\n              wax: +w[0],\r\n              tlm: +t[0],\r\n              last: dayjs().to(dayjs(responses[2].data.rows[0].last_mine).add(7,'hour').toISOString())\r\n            }\r\n          })\r\n        )\r\n        .catch(e => console.error(e))\r\n    });\r\n\r\n    Promise.all(all).then(res => {\r\n      if (res.length > 0) {\r\n        setAllWax(res.map(v=>v.wax).reduce((a, c) => a+c).toFixed(2))\r\n        setAllTlm(res.map(v=>v.tlm).reduce((a, c) => a+c).toFixed(2))\r\n        setDatas(res);  \r\n      }\r\n      \r\n      message.destroy();\r\n      setTxtSearch('');\r\n    })\r\n  }\r\n  \r\n  const onSearch = async (acc) => {\r\n    setTxtSearch(acc);\r\n    if (acc && !!!accounts.includes(acc)) {\r\n      console.log('add');\r\n      setAccounts([...accounts, acc]);\r\n      message.loading(`Add account ${acc}`)\r\n    } else {\r\n      message.error('This account has in list.');\r\n    }\r\n  }\r\n\r\n  const ElementTable = () => {\r\n    return (\r\n      <Table size={'small'} columns={columns} dataSource={datas.map((v,i) => ({key:i, ...v}))} />\r\n    )\r\n  }\r\n\r\n  const loopTime = () => {\r\n    clearInterval(timeoutID)\r\n    setTimeoutID(setInterval(() => {\r\n      if (accounts.length > 0) {\r\n        console.log('Load Account', accounts);\r\n        getAccountInfo(accounts);\r\n      }\r\n    }, 1000 * sec));\r\n  }\r\n  \r\n\r\n  useEffect(() => {\r\n    if (sec > 0) {\r\n      console.log('Change sec', sec);\r\n      message.info(`Change time ${sec}`);\r\n      loopTime();\r\n    }\r\n  }, [sec])\r\n\r\n  useEffect(() => {\r\n    console.log('account change', accounts);\r\n    getAccountInfo(accounts);\r\n    loopTime();\r\n  }, [accounts])\r\n\r\n  \r\n  \r\n  return (\r\n    <Row gutter={[12,12]}>\r\n      <Col sm={{span:24}} md={{span:12}} lg={{span:6}}>\r\n        <Search value={txtSearch} onChange={e=>setTxtSearch(e.target.value)} placeholder={'New Account'} allowClear={true} enterButton={<PlusOutlined />} onSearch={onSearch} />\r\n      </Col>\r\n      <Col sm={{span:24}} md={{span:12}} lg={{span:6}}>\r\n        Refresh <InputNumber min={1} max={60*60} onChange={v => setSec(v)} defaultValue={sec} bordered={false} /> Sec.\r\n      </Col>\r\n      <Col span={24}>\r\n        <ElementTable />\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default AWAccount\r\n","import React, { useState, useEffect, useContext } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\nimport { Layout, Menu } from 'antd';\nimport Home from './page/Home';\nimport Login from './page/Login';\nimport AWAccount from './page/AWAccount';\nimport authContext from './context/Auth';\nconst { Header, Content, Footer } = Layout;\n\nconst PrivateRoute = ({ children, ...rest }) => {\n  let auth = useContext(authContext);\n\n  return (\n    <Route\n      {...rest}\n      render={({ location }) => children }\n      // render={({ location }) =>\n      //   auth.isLogin ? (\n      //     children\n      //   ) : (\n      //     <Redirect\n      //       to={{\n      //         pathname: \"/login\",\n      //         state: { from: location }\n      //       }}\n      //     />\n      //   )\n      // }\n    />\n  );\n}\n\nconst App = () => {\n  const [auth, setAuth] = useState({\n    isLogin: false,\n    account: null,\n    publicKey: null,\n    wax: 0,\n    tlm: 0,\n    cpu: 0,\n    ram: 0,\n  });\n\n\n  return (\n    <authContext.Provider value={auth}>\n      <Router>\n      <Layout className=\"layout\">\n        <Header>\n          <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['1']}>\n            <Menu.Item key=\"1\"><Link to=\"/\">AWEasy</Link></Menu.Item>\n            <Menu.Item key=\"2\"><Link to=\"/AWAccount\">AWAccount</Link></Menu.Item>\n            {/* <Menu.Item key=\"2\"><Link to=\"/login\">Login</Link></Menu.Item> */}\n          </Menu>\n        </Header>\n        <Content style={{ padding: '25px 50px' }}>\n          <div className=\"site-layout-content\">\n              <Switch>\n                {/* <Route path=\"/login\">\n                  <Login />\n                </Route>\n                <PrivateRoute path=\"/\">\n                  <Home />\n                </PrivateRoute> */}\n                <Route path=\"/AWAccount\">\n                  <AWAccount />\n                </Route>\n                <Route path=\"/\">\n                  <Home />\n                </Route>\n              </Switch>\n          </div>\n        </Content>\n        <Footer style={{ textAlign: 'center' }}>AWEasy ©2021 v 1.0.2 Created by MUNKGORN</Footer>\n        </Layout>\n        </Router>\n    </authContext.Provider>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}